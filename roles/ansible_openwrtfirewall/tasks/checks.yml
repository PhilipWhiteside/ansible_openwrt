---
- name: Check all variables that either need to be accept, reject or drop
  assert:
    that: ({{ item }} | upper == "ACCEPT") or ({{ item }} | upper == "REJECT") or ({{ item }} | upper == "DROP")
    fail_msg: "{{ item }} needs to be either ACCEPT, REJECT or DROP."
    success_msg: "{{ item }} is valid."
  loop:
    - "openwrt_firewall_default_forward"
    - "openwrt_firewall_default_input"
    - "openwrt_firewall_default_output"
- name: Check all variables that either need to be 1 or 0
  assert:
    that: ({{ item }}== "1") or ({{ item }}=="0")
    fail_msg: "{{ item }} needs to be 1 or 0."
    success_msg: "{{ item }} is valid."
  loop:
    - "openwrt_firewall_default_synflood_protect"
    - "openwrt_firewall_default_flow_offloading"
    - "openwrt_firewall_default_flow_offloading_hw"
    - "openwrt_firewall_default_drop_invalid"
- name: check default forwards
  assert:
    that:
      - item.src is defined
      - item.dest is defined
    fail_msg: "forwarding list item needs a src AND dest key."
    success_msg: "forwarding item seems valid."
  loop: "{{ openwrt_firewall_forwardingsdefault }}"
  when: openwrt_firewall_forwardingsdefault is defined
- name: check host based forwardings
  assert:
    that:
      - item.src is defined
      - item.dest is defined
    fail_msg: "forwarding list item needs a src AND dest key."
    success_msg: "host forwardings seem valid."
  loop: "{{ openwrt_firewall_forwardingshost }}"
  when: openwrt_firewall_forwardingshost is defined
- name: check group based forwardings
  assert:
    that:
      - item.src is defined
      - item.dest is defined
    fail_msg: "forwarding list item needs a src AND dest key."
    success_msg: "host forwardings seem valid."
  loop: "{{ openwrt_firewall_forwardingsmergedgroup }}"
  when: openwrt_firewall_forwardingsmergedgroup is defined
    # this check is bullshit, need to write new checks for rules
    #- name: rudimentary checks on rules
    #  assert:
    #    that:
    #      - item.value.src is defined
    #    fail_msg: "Rule {{ item.key}} contains errors, it has no attribute src."
    #    success_msg: "Rule {{ item.key }} seems OK."
    #  loop: "{{ openwrt_firewall_rulesall | dict2items }}"
- name: rudimentary checks on zones
  assert:
    that:
      - (item.value.forward | upper == "ACCEPT") or (item.value.forward | upper == "REJECT") or (item.value.forward | upper == "DROP")
      - (item.value.input | upper == "ACCEPT") or (item.value.input | upper == "REJECT") or (item.value.input | upper == "DROP")
      - (item.value.output | upper == "ACCEPT") or (item.value.output | upper == "REJECT") or (item.value.output | upper == "DROP")
    fail_msg: "Zone {{ item.key }} is invalid. Attribute forward, input and ouput need to be either ACCEPT, REJECT or DROP."
    success_msg: "Zone {{ item.key }} seems OK."
  loop: "{{ openwrt_firewall_zonesall | dict2items }}"
    #- name: show all rules
    #  debug:
    #    var: openwrt_firewall_rulesall
    #- name: show all zones
    #  debug:
    #    var: openwrt_firewall_zonesall
