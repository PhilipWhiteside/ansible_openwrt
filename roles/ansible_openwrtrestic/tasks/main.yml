---
# tasks file for ansible_openwrtrestic
- name: Install restic and other needed software
  opkg:
    name: restic,openssh-client-utils,shadow-usermod
    state: present
    update_cache: yes
- name: add /etc/config/installed.packages to sysupgrade config
  lineinfile:
    path: /etc/sysupgrade.conf
    line: /etc/config/installed.packages
    regexp: /etc/config/installed.packages
    state: present
- name: setup cron to dump installed packages once a day
  cron:
    name: "dump packages"
    minute: 0
    hour: 0
    job: "/bin/opkg list-installed > /etc/config/installed.packages"
#- name: check if root already has public key
#  stat:
#    path: /root/.ssh/id_rsa.pub
#  register: publickey
#- name: check if root already has private key
#  stat:
#    path: /root/.ssh/id_rsa
#  register: privatekey
#- name: make sure root user has ssh public key
#  command: "/usr/bin/ssh-keygen -b 2048 -t rsa -f /root/.ssh/id_rsa -q -N ''"
#  when: not publickey.stat.exists or not privatekey.stat.exists
- name: make sure root user has ssh public key
  user:
    name: "root"
    generate_ssh_key: yes
  register: rootuser
#- name: get root users public key
#  set_fact:
#    currentpublickey: "{{ lookup('file', '/root/.ssh/id_rsa.pub') }}"
- name: provide root user's public key to destination machine
  authorized_key:
    user: "{{ restic_sshkey_user }}"
    state: present
    key: "{{ rootuser['ssh_public_key'] }}"
  become: True
  become_user: root
  delegate_to: "{{ restic_sshkey_targethost }}"
- name: install target hosts fingerprint to known hosts
  known_hosts:
    path: "/root/.ssh/known_hosts"
    key: "{{ lookup('pipe', '/usr/bin/ssh-keyscan -trsa ' + borgmatic_sshkey_targethost) }}"
    name: "{{ restic_sshkey_targethost }}"
    state: present
- name: deploy restic configuration
  template:
    src: restic.conf.jinja2
    dest: /etc/restic
    owner: root
    group: root
    mode: 0600
- name: deploy restic password file
  template:
    src: password.jinja2
    dest: /etc/resticpassword
    owner: root
    group: root
    mode: 0600
- name: init repository
  command: "restic -r {{ restic_repository }} init"
  environment:
    RESTIC_PASSWORD: "{{ restic_encpassphrase }}"
  register: restic_init
  failed_when:
    - restic_init.rc != 0
    - not 'config file already exists' in restic_init.stderr
    - not 'config already initialized' in restic_init.stderr
    - not 'config already exists' in restic_init.stderr
- name: setup cron backup jobs for different include paths
  cron:
    name: "{{ restic_cron_name }} {{ item }}"
    hour: "{{ restic_cron_hour }}"
    minute: "{{ restic_cron_minute }}"
    user: "root"
    job: "/usr/bin/restic -p /etc/resticpassword -r {{ restic_repository }} backup {{ item }}"
  loop: "{{ restic_srcdirs }}"
- name: setup cron prune jobs
  cron:
    name: "{{ restic_cron_name }} prune"
    hour: 6
    minute: 0
    user: "root"
    job: "/usr/bin/restic --keep-daily {{ restic_keepdaily }} --keep-weekly {{ restic_keepweekly }} --keep-monthly {{ restic_keepmonthly }} -p /etc/resticpassword -r {{ restic_repository }} prune"
